#1-my_list.py

===========
How to use:
===========

*initialization
>>> MyList = __import__('1-my_list').MyList
>>> my_list = MyList()
>>> type(my_list)
<class '1-my_list.MyList'>

* printing an empty list
>>> my_list = MyList()
>>> print(my_list)
[]

* list of four positive integers
>>> my_list = MyList([1, 2, 3, 4])
>>> print(my_list)
[1, 2, 3, 4]

* list of four negative integers
>>> my_list = MyList([-4, -5, -6, -7])
>>> print(my_list)
[-4, -5, -6, -7]

* when the argument is None
>>> my_list = MyList(None)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: 'NoneType' object is not iterable

* error when more than 1 argument are give
>>> my_list = MyList([1, 2, 3], [4, 5, 6])
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: list expected at most 1 argument, got 2

*list containing strings
>>> my_list = MyList(['Holberton', 'School'])
>>> print(my_list)
['Holberton', 'School']

* appending elements to my_list and printing the result
>>> my_list = MyList()
>>> my_list.append(1)
>>> my_list.append(4)
>>> my_list.append(2)
>>> my_list.append(3)
>>> my_list.append(5)
>>> print(my_list)
[1, 4, 2, 3, 5]

* appending the elements which are strings
>>> my_list = MyList()
>>> my_list.append('Holberton')
>>> my_list.append('School')
>>> print(my_list)
['Holberton', 'School']

* assigning more than one (string) argument
>>> my_list = MyList(['Holberton'], ['School'])
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: list expected at most 1 argument, got 2

* assigning an unsorted list of positive integers and calling the sort function
>>> my_list = MyList([5, 8, 6, 1, 9, 3])
>>> my_list.print_sorted()
[1, 3, 5, 6, 8, 9]

* assigning an unsorted list of negative integers and calling the sort function
>>> my_list = MyList([-4, -5, -1, -2])
>>> my_list.print_sorted()
[-5, -4, -2, -1]

* calling the sorting function upon the list of strings
>>> my_list = MyList(['Holberton', 'School'])
>>> my_list.print_sorted()
['Holberton', 'School']

* calling the sorting function upon an empty list
>>> my_list = MyList()
>>> my_list.print_sorted()
[]
