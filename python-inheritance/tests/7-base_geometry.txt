# 7-base_geometry.py

===========
How to use:
===========

* Initialization

>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry
>>> bg = BaseGeometry()
>>> type(bg)
<class '7-base_geometry.BaseGeometry'>

* Testing the area method
>>> bg.area()
Traceback (most recent call last):
...
Exception: area() is not implemented

* Test the integer validator with the valid integer value
>>> bg.integer_validator("my_int", 12)
>>> bg.integer_validator("width", 89)
>>> bg.integer_validator(1, 1)

* Invalid number of positional arguments
>>> bg.integer_validator()
Traceback (most recent call last):
...
TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'

* Invalid syntax
>>> bg.integer_validator(, 12)
Traceback (most recent call last):
...
SyntaxError: invalid syntax

* Try an invalid number of positional arguents
>>> bg.integer_validator(12)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: integer_validator() missing 1 required positional argument: 'value'

* Test the integer validator with an invalid number of arguments
>>> bg.integer_validator("name", 1, 2)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: integer_validator() takes 3 positional arguments but 4 were given

* Testing with only one argument
>>> bg.integer_validator("name")
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: integer_validator() missing 1 required positional argument: 'value'

* Test the integer validator with an invalid value (string)
>> bg.integer_validator("name", "John")
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/holbertonschool-higher_level_programming/python-inheritance/7-base_geometry.py", line 15, in integer_validator
    raise TypeError("{} must be an integer".format(name))
TypeError: name must be an integer

* Test the integer validator with an invalid value (float)
>>> bg.integer_validator("name", 1.5)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/holbertonschool-higher_level_programming/python-inheritance/7-base_geometry.py", line 15, in integer_validator
    raise TypeError("{} must be an integer".format(name))
TypeError: name must be an integer

* Test the integer valiator method with an invalid value (0)
>>> bg.integer_validator("age", 0)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/holbertonschool-higher_level_programming/python-inheritance/7-base_geometry.py", line 17, in integer_validator
    raise ValueError("{} must be greater than 0".format(name))
ValueError: age must be greater than 0

* Test the integer validator method with an invalid value (negative)
>>> bg.integer_validator("distance", -4)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/holbertonschool-higher_level_programming/python-inheritance/7-base_geometry.py", line 17, in integer_validator
    raise ValueError("{} must be greater than 0".format(name))
ValueError: distance must be greater than 0

* Test the integer validator method with an invalid value (None)
>>> bg.integer_validator("distance", None)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/holbertonschool-higher_level_programming/python-inheritance/7-base_geometry.py", line 15, in integer_validator
    raise TypeError("{} must be an integer".format(name))
TypeError: distance must be an integer

* Test the integer validator method with an invalid value (empty list)
>>> bg.integer_validator("distance", [])
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/holbertonschool-higher_level_programming/python-inheritance/7-base_geometry.py", line 15, in integer_validator
    raise TypeError("{} must be an integer".format(name))
TypeError: distance must be an integer

* Test the integer validator method with an invalid value (list of one element)
>>> bg.integer_validator("distance", [1])
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/holbertonschool-higher_level_programming/python-inheritance/7-base_geometry.py", line 15, in integer_validator
    raise TypeError("{} must be an integer".format(name))
TypeError: distance must be an integer

* Test the integer validator method with an invalid value (list)
>>> bg.integer_validator("distance", [1, 2, 3])
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/holbertonschool-higher_level_programming/python-inheritance/7-base_geometry.py", line 15, in integer_validator
    raise TypeError("{} must be an integer".format(name))
TypeError: distance must be an integer

* Test the integer validator method with an invalid value (empty tuple)
>>> bg.integer_validator("distance", ())
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/holbertonschool-higher_level_programming/python-inheritance/7-base_geometry.py", line 15, in integer_validator
    raise TypeError("{} must be an integer".format(name))
TypeError: distance must be an integer

* Test the integer validator method with an invalid value (tuple of one element)
>>> bg.integer_validator("distance", (1,))
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/holbertonschool-higher_level_programming/python-inheritance/7-base_geometry.py", line 15, in integer_validator
    raise TypeError("{} must be an integer".format(name))
TypeError: distance must be an integer

* Test the integer validator method with an invalid value (tuple)
>>> bg.integer_validator("distance", (1, 2, 3))
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/holbertonschool-higher_level_programming/python-inheritance/7-base_geometry.py", line 15, in integer_validator
    raise TypeError("{} must be an integer".format(name))
TypeError: distance must be an integer

* Test the integer validator method with an invalid value (boolean)
>>> bg.integer_validator("distance", True)

* Test the integer validator with an invalid type of one element
>>> bg.integer_validator("distance", {1})
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/holbertonschool-higher_level_programming/python-inheritance/7-base_geometry.py", line 15, in integer_validator
    raise TypeError("{} must be an integer".format(name))
TypeError: distance must be an integer

* Test the integer validator method with an invalid value (dict)
>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry
>>> bg = BaseGeometry()
>>> try:
...     bg.integer_validator("distance", {1, 2, 3})
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
... 
[TypeError] distance must be an integer
