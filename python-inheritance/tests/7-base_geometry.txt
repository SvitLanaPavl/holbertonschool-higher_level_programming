# 7-base_geometry.py

===========
How to use:
===========

* Initialization

>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry
>>> bg = BaseGeometry()

* Testing the area method
>>> bg.area()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/holbertonschool-higher_level_programming/python-inheritance/7-base_geometry.py", line 10, in area
    raise Exception("area() is not implemented")
Exception: area() is not implemented

* Test the integer validator with the valid integer value
>>> bg.integer_validator("my_int", 12)
>>> bg.integer_validator("width", 89)

* Test the integer validator with an invalid value (string)
>>> try:
...     bg.integer_validator("name", "John")
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
... 
[TypeError] name must be an integer

* Test the integer valiator method with an invalid value (0)
>>> try:
...     bg.integer_validator("age", 0)
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
... 
[ValueError] age must be greater than 0

* Test the integer validator method with an invalid value (negative)
>>> try:
...     bg.integer_validator("distance", -4)
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
... 
[ValueError] distance must be greater than 0

* Test the integer validator method with an invalid value (None)
>>> try:
...     bg.integer_validator("distance", None)
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
... 
[TypeError] distance must be an integer

* Test the integer validator method with an invalid value (empty list)
>>> try:
...     bg.integer_validator("distance", [])
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
... 
[TypeError] distance must be an integer

* Test the integer validator method with an invalid value (list of one element)
>>> try:
...     bg.integer_validator("distance", [1])
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
... 
[TypeError] distance must be an integer

* Test the integer validator method with an invalid value (list)
>>> try:
...     bg.integer_validator("distance", [1, 2, 3])
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
... 
[TypeError] distance must be an integer

* Test the integer validator method with an invalid value (empty tuple)
>>> try:
...     bg.integer_validator("distance", ())
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
... 
[TypeError] distance must be an integer

* Test the integer validator method with an invalid value (tuple of one element)
>>> try:
...     bg.integer_validator("distance", (1, 2, 3))
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
... 
[TypeError] distance must be an integer

* Test the integer validator method with an invalid value (tuple)
>>> try:
...     bg.integer_validator("distance", (1, 2, 3))
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
... 
[TypeError] distance must be an integer

* Test the integer validator method with an invalid value (boolean)
>>> try:
...     bg.integer_validator("distance", True)
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
... 

* Test the integer validator method with an invalid value (dict)
>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry
>>> bg = BaseGeometry()
>>> try:
...     bg.integer_validator("distance", {1, 2, 3})
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
... 
[TypeError] distance must be an integer

* Test with the name being a dictionary
>>> try:
...     bg.integer_validator({"distance": 1}, 5)
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
... 

* Test the integer validator method with an invalid value (dict as name and tuple as value)
>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry
>>> bg = BaseGeometry()
>>> try:
...     bg.integer_validator({"distance": 1}, (5, 2))
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
... 
[TypeError] {'distance': 1} must be an integer
